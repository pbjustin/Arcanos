name: ARCANOS Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        type: string
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        default: 'manual'
        type: string

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  DEPLOY_MODE: agent-control

jobs:
  arcanos-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      issues: read
      pull-requests: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_name }}

      - name: 🧰 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Build project
        run: npm run build

      - name: 🤖 ARCANOS Release Analysis
        run: |
          echo "Running ARCANOS release analysis..."
          
          # Start ARCANOS backend
          npm start &
          SERVER_PID=$!
          
          # Wait for server to be ready
          sleep 10
          
          # Analyze release
          curl -X POST http://localhost:8080/ask \
            -H "Content-Type: application/json" \
            -d '{
              "prompt": "Analyze this release: Tag ${{ inputs.tag_name }}. Generate: 1) Release notes summary, 2) Breaking changes assessment, 3) Upgrade instructions, 4) Documentation updates needed, 5) Post-release monitoring recommendations.",
              "context": "release_analysis"
            }' \
            -o release_analysis.json
          
          # Stop the server
          kill $SERVER_PID || true
          
          echo "Release analysis completed"

      - name: 📋 Generate Release Documentation
        run: |
          if [ -f release_analysis.json ]; then
            echo "ARCANOS Release Analysis:"
            cat release_analysis.json
            
            # Generate release notes
            echo "# 🚀 ARCANOS Release ${{ inputs.tag_name }}" > release_notes.md
            echo "" >> release_notes.md
            echo "**Release Date:** $(date -u +"%Y-%m-%d")" >> release_notes.md
            echo "**Tag:** ${{ inputs.tag_name }}" >> release_notes.md
            echo "**Triggered by:** ${{ inputs.trigger_source }}" >> release_notes.md
            echo "" >> release_notes.md
            echo "## 🤖 ARCANOS Analysis" >> release_notes.md
            echo '```json' >> release_notes.md
            cat release_analysis.json >> release_notes.md
            echo '```' >> release_notes.md
            echo "" >> release_notes.md
            echo "## 📋 Generated by ARCANOS" >> release_notes.md
            echo "This release has been analyzed and documented by ARCANOS AI backend controller." >> release_notes.md
          else
            echo "No release analysis available"
            exit 1
          fi

      - name: 🏗️ Build Release Artifacts
        run: |
          echo "Building release artifacts..."
          
          # Create release directory
          mkdir -p release-artifacts
          
          # Copy built application
          cp -r dist/ release-artifacts/
          
          # Copy configuration files
          cp package.json package-lock.json release-artifacts/
          cp README.md release-artifacts/ || echo "README.md not found"
          
          # Create deployment package
          cd release-artifacts
          tar -czf ../arcanos-${{ inputs.tag_name }}.tar.gz .
          cd ..
          
          echo "Release artifacts created"

      - name: 🔐 Security Scan
        run: |
          echo "Running security scan..."
          
          # Run npm audit
          npm audit --audit-level=moderate || echo "Security scan completed with warnings"
          
          # Start ARCANOS for security analysis
          npm start &
          SERVER_PID=$!
          sleep 10
          
          # Security analysis via ARCANOS
          curl -X POST http://localhost:8080/ask \
            -H "Content-Type: application/json" \
            -d '{
              "prompt": "Perform a security analysis of this release. Check for: 1) Known vulnerabilities, 2) Dependency risks, 3) Configuration security, 4) API security, 5) Deployment security considerations.",
              "context": "security_analysis"
            }' \
            -o security_analysis.json
          
          kill $SERVER_PID || true
          
          echo "Security analysis completed"

      - name: 📊 Release Quality Gate
        run: |
          SECURITY_ISSUES=false
          
          if [ -f security_analysis.json ]; then
            SECURITY_CONTENT=$(cat security_analysis.json)
            
            if echo "$SECURITY_CONTENT" | grep -qi "critical\|high risk\|vulnerability\|security issue"; then
              SECURITY_ISSUES=true
              echo "⚠️ Security issues detected"
            fi
          fi
          
          if [ "$SECURITY_ISSUES" = true ]; then
            echo "❌ Release blocked due to security concerns"
            echo "RELEASE_APPROVED=false" >> $GITHUB_ENV
          else
            echo "✅ Release security validation passed"
            echo "RELEASE_APPROVED=true" >> $GITHUB_ENV
          fi

      - name: 📦 Publish Release (if approved)
        if: env.RELEASE_APPROVED == 'true'
        run: |
          echo "Publishing release ${{ inputs.tag_name }}..."
          
          # In a real scenario, this would publish to npm, Docker registry, etc.
          echo "🔄 Simulating release publication..."
          echo "✅ Release published successfully"

      - name: 💾 Upload Release Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arcanos-release-${{ inputs.tag_name }}
          path: |
            release_analysis.json
            security_analysis.json
            release_notes.md
            arcanos-${{ inputs.tag_name }}.tar.gz
          retention-days: 365

      - name: 📝 Create Release Issue
        if: env.RELEASE_APPROVED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚀 Release ${{ inputs.tag_name }} - ARCANOS Analysis`,
                body: releaseNotes,
                labels: ['arcanos', 'release', 'documentation']
              });
              
              console.log('Created release documentation issue');
            } catch (error) {
              console.log('Error creating release issue:', error.message);
            }

      - name: ❌ Block Release
        if: env.RELEASE_APPROVED == 'false'
        run: |
          echo "❌ Release ${{ inputs.tag_name }} blocked due to security concerns"
          
          # Create security report
          echo "## ❌ ARCANOS Release Blocked" > security_report.md
          echo "**Tag:** ${{ inputs.tag_name }}" >> security_report.md
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security_report.md
          echo "**Status:** ❌ Blocked by ARCANOS security analysis" >> security_report.md
          echo "" >> security_report.md
          echo "### Security Analysis Results" >> security_report.md
          echo '```json' >> security_report.md
          cat security_analysis.json >> security_report.md
          echo '```' >> security_report.md
          
          exit 1